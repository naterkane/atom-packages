"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="../../typings/main.d.ts" />
var universe = require("../raml1/tools/universe");
var core = require("../raml1/wrapped-ast/parserCore");
var universeHelpers = require("../raml1/tools/universeHelpers");
var universes = require("../raml1/tools/universe");
function dump(node, serializeMeta) {
    if (serializeMeta === void 0) { serializeMeta = true; }
    return new TCKDumper({
        rootNodeDetails: true,
        serializeMetadata: serializeMeta
    }).dump(node);
}
exports.dump = dump;
var TCKDumper = (function () {
    function TCKDumper(options) {
        this.options = options;
        this.transformers = [
            new ResourcesTransformer(),
            //new TypeExampleTransformer(),
            new ParametersTransformer(),
            new TypesTransformer(),
            new UsesTransformer(),
            new PropertiesTransformer(),
            //new ExamplesTransformer(),
            new ResponsesTransformer(),
            new BodiesTransformer(),
            new AnnotationsTransformer(),
            new SecuritySchemesTransformer(),
            new AnnotationTypesTransformer(),
            new TemplateParametrizedPropertiesTransformer(),
            new TraitsTransformer(),
            new ResourceTypesTransformer(),
            new FacetsTransformer(),
            new SchemasTransformer(),
            //new OneElementArrayTransformer(),
            new ProtocolsToUpperCaseTransformer(),
            new ResourceTypeMethodsToMapTransformer(),
            new ReferencesTransformer()
        ];
        this.ignore = new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universeHelpers.isResponseType, universeHelpers.isDisplayNameProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isApiSibling, universeHelpers.isDisplayNameProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isAnnotationRefTypeOrDescendant, universeHelpers.isAnnotationProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isSecuritySchemeRefType, universeHelpers.isSecuritySchemeProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isTraitRefType, universeHelpers.isTraitProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isResourceTypeRefType, universeHelpers.isResourceTypeProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isApiSibling, universeHelpers.isRAMLVersionProperty)
        ]);
        this.missingProperties = new PropertiesData();
        this.options = this.options || {};
        if (this.options.serializeMetadata == null) {
            this.options.serializeMetadata = true;
        }
    }
    TCKDumper.prototype.printMissingProperties = function () {
        return this.missingProperties.print();
    };
    TCKDumper.prototype.dump = function (node) {
        var highLevelNode = node.highLevel();
        var highLevelParent = highLevelNode && highLevelNode.parent();
        var rootNodeDetails = !highLevelParent && this.options.rootNodeDetails;
        return this.dumpInternal(node, rootNodeDetails);
    };
    TCKDumper.prototype.dumpInternal = function (node, rootNodeDetails) {
        var _this = this;
        if (rootNodeDetails === void 0) { rootNodeDetails = false; }
        if (node == null) {
            return null;
        }
        if (node instanceof core.BasicNodeImpl) {
            var props = {};
            var basicNode = node;
            var definition = basicNode.highLevel().definition();
            definition.allProperties().filter(function (x) { return !_this.ignore.match(basicNode.definition(), x); }).forEach(function (x) {
                props[x.nameId()] = x;
            });
            definition.allCustomProperties().filter(function (x) { return !_this.ignore.match(basicNode.definition(), x); }).forEach(function (x) {
                props[x.nameId()] = x;
            });
            var obj = this.dumpProperties(props, node);
            this.serializeMeta(obj, basicNode);
            if (rootNodeDetails) {
                var result = {};
                if (definition) {
                    var ramlVersion = definition.universe().version();
                    result.ramlVersion = ramlVersion;
                    result.type = definition.nameId();
                }
                result.specification = obj;
                result.errors = this.dumpErrors(basicNode.errors());
                return result;
            }
            else {
                return obj;
            }
        }
        else if (node instanceof core.AttributeNodeImpl) {
            var props = {};
            var attrNode = node;
            var definition = attrNode.highLevel().definition();
            definition.allCustomProperties().filter(function (x) { return !_this.ignore.match(attrNode.highLevel().property().range(), x); }).forEach(function (x) {
                props[x.nameId()] = x;
            });
            var isValueType = attrNode.highLevel().property().range().isValueType();
            if (isValueType && attrNode['value']) {
                var val = attrNode['value']();
                if (typeof val == 'number' || typeof val == 'string' || typeof val == 'boolean') {
                    return val;
                }
            }
            var obj = this.dumpProperties(props, node);
            this.serializeMeta(obj, attrNode);
            return obj;
        }
        else if (node instanceof core.TypeInstanceImpl) {
            return this.serializeTypeInstance(node);
        }
        else if (node instanceof core.TypeInstancePropertyImpl) {
            return this.serializeTypeInstanceProperty(node);
        }
        return node;
    };
    TCKDumper.prototype.dumpErrors = function (errors) {
        return errors.map(function (x) {
            return {
                "code": x.code,
                "message": x.message,
                "path": x.path,
                "line": x.line,
                "column": x.column,
                "position": x.start,
                "range": x.range
            };
        }).sort(function (x, y) {
            if (x.path != y.path) {
                return x.path.localeCompare(y.path);
            }
            if (x.position != y.position) {
                return x.position - y.position;
            }
            return x.code - y.code;
        });
    };
    TCKDumper.prototype.dumpProperties = function (props, node) {
        var _this = this;
        var obj = {};
        Object.keys(props).forEach(function (propName) {
            if (!node[propName]) {
                _this.missingProperties.addProperty(props[propName], node.kind());
                return;
            }
            var property = props[propName];
            var value = node[propName]();
            if (node.definition
                && universeHelpers.isTypeDeclarationSibling(node.definition())
                && universeHelpers.isTypeProperty(property)) {
                //custom handling of not adding "type" property to the types having "schema" inside, even though the property actually exist,
                // thus making "type" and "schema" arrays mutually exclusive in JSON.
                if (props[universe.Universe10.TypeDeclaration.properties.schema.name]) {
                    var schemaValue = node[universe.Universe10.TypeDeclaration.properties.schema.name]();
                    if (schemaValue != null && (!Array.isArray(schemaValue) || schemaValue.length != 0)) {
                        return;
                    }
                }
            }
            if (Array.isArray(value)) {
                var propertyValue = [];
                value.forEach(function (x) { return propertyValue.push(_this.dumpInternal(x)); });
                if (propertyValue.length == 0 && node instanceof core.BasicNodeImpl && !_this.isDefined(node, propName)) {
                    return;
                }
                _this.transformers.forEach(function (x) {
                    if (x.match(node, property)) {
                        propertyValue = x.transform(propertyValue);
                    }
                });
                obj[propName] = propertyValue;
            }
            else {
                var val = _this.dumpInternal(value);
                if (val == null && node instanceof core.BasicNodeImpl && !_this.isDefined(node, propName)) {
                    return;
                }
                if (node instanceof core.BasicNodeImpl) {
                    _this.transformers.forEach(function (x) {
                        if (x.match(node, property)) {
                            val = x.transform(val);
                        }
                    });
                }
                obj[propName] = val;
            }
        });
        return obj;
    };
    TCKDumper.prototype.serializeMeta = function (obj, node) {
        if (!this.options.serializeMetadata) {
            return;
        }
        var meta = node.meta();
        if (!meta.isDefault()) {
            obj["__METADATA__"] = meta.toJSON();
        }
    };
    TCKDumper.prototype.serializeTypeInstance = function (inst) {
        var _this = this;
        if (inst.isScalar()) {
            return inst.value();
        }
        else {
            var props = inst.properties();
            if (props.length == 0) {
                return null;
            }
            var obj = {};
            props.forEach(function (x) { return obj[x.name()] = _this.serializeTypeInstanceProperty(x); });
            return obj;
        }
    };
    TCKDumper.prototype.serializeTypeInstanceProperty = function (prop) {
        var _this = this;
        if (prop.isArray()) {
            var values = prop.values();
            //if(values.length==0){
            //    return null;
            //}
            var arr = [];
            values.forEach(function (x) { return arr.push(_this.serializeTypeInstance(x)); });
            return arr;
        }
        else {
            return this.serializeTypeInstance(prop.value());
        }
    };
    TCKDumper.prototype.isDefined = function (node, name) {
        var hl = node.highLevel();
        if (hl.elementsOfKind(name).length > 0) {
            return true;
        }
        if (hl.attributes(name).length > 0) {
            return true;
        }
        return false;
    };
    return TCKDumper;
}());
exports.TCKDumper = TCKDumper;
var BasicObjectPropertyMatcher = (function () {
    function BasicObjectPropertyMatcher(typeMatcher, propMatcher) {
        this.typeMatcher = typeMatcher;
        this.propMatcher = propMatcher;
    }
    BasicObjectPropertyMatcher.prototype.match = function (td, prop) {
        return this.typeMatcher(td) && this.propMatcher(prop);
    };
    return BasicObjectPropertyMatcher;
}());
var CompositeObjectPropertyMatcher = (function () {
    function CompositeObjectPropertyMatcher(matchers) {
        this.matchers = matchers;
    }
    CompositeObjectPropertyMatcher.prototype.match = function (td, prop) {
        var l = this.matchers.length;
        for (var i = 0; i < l; i++) {
            if (this.matchers[i].match(td, prop)) {
                return true;
            }
        }
        return false;
    };
    return CompositeObjectPropertyMatcher;
}());
var ArrayToMapTransformer = (function () {
    function ArrayToMapTransformer(matcher, propName) {
        this.matcher = matcher;
        this.propName = propName;
    }
    ArrayToMapTransformer.prototype.match = function (node, prop) {
        return this.matcher.match(node.definition(), prop);
    };
    ArrayToMapTransformer.prototype.transform = function (value) {
        var _this = this;
        if (Array.isArray(value) && value.length > 0 && value[0][this.propName]) {
            var obj = {};
            value.forEach(function (x) {
                var key = x[_this.propName];
                var previous = obj[key];
                if (previous) {
                    if (Array.isArray(previous)) {
                        previous.push(x);
                    }
                    else {
                        obj[key] = [previous, x];
                    }
                }
                else {
                    obj[key] = x;
                }
            });
            return obj;
        }
        return value;
    };
    return ArrayToMapTransformer;
}());
var ArrayToMappingsArrayTransformer = (function () {
    function ArrayToMappingsArrayTransformer(matcher, propName) {
        this.matcher = matcher;
        this.propName = propName;
    }
    ArrayToMappingsArrayTransformer.prototype.match = function (node, prop) {
        return this.matcher.match(node.definition(), prop);
    };
    ArrayToMappingsArrayTransformer.prototype.transform = function (value) {
        var _this = this;
        if (Array.isArray(value) && value.length > 0 && value[0][this.propName]) {
            var array = [];
            value.forEach(function (x) {
                var obj = {};
                obj[x[_this.propName]] = x;
                array.push(obj);
            });
            return array;
        }
        return value;
    };
    return ArrayToMappingsArrayTransformer;
}());
var ParametersTransformer = (function (_super) {
    __extends(ParametersTransformer, _super);
    function ParametersTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universeHelpers.isApiSibling, universeHelpers.isBaseUriParametersProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isResourceBaseSibling, universeHelpers.isUriParametersProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isResourceBaseSibling, universeHelpers.isQueryParametersProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isHasNormalParametersSibling, universeHelpers.isQueryParametersProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isHasNormalParametersSibling, universeHelpers.isHeadersProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isBodyLikeType, universeHelpers.isFormParametersProperty)
        ]), "name");
    }
    return ParametersTransformer;
}(ArrayToMapTransformer));
var TypesTransformer = (function (_super) {
    __extends(TypesTransformer, _super);
    function TypesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universeHelpers.isLibraryBaseSibling, universeHelpers.isTypesProperty)
        ]), "name");
    }
    return TypesTransformer;
}(ArrayToMappingsArrayTransformer));
var UsesTransformer = (function (_super) {
    __extends(UsesTransformer, _super);
    function UsesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universeHelpers.isLibraryBaseSibling, universeHelpers.isUsesProperty)
        ]), "name");
    }
    return UsesTransformer;
}(ArrayToMapTransformer));
var PropertiesTransformer = (function (_super) {
    __extends(PropertiesTransformer, _super);
    function PropertiesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universeHelpers.isObjectTypeDeclarationSibling, universeHelpers.isPropertiesProperty)
        ]), "name");
    }
    return PropertiesTransformer;
}(ArrayToMapTransformer));
var ResponsesTransformer = (function (_super) {
    __extends(ResponsesTransformer, _super);
    function ResponsesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universeHelpers.isMethodBaseSibling, universeHelpers.isResponsesProperty)
        ]), "code");
    }
    return ResponsesTransformer;
}(ArrayToMapTransformer));
var AnnotationsTransformer = (function (_super) {
    __extends(AnnotationsTransformer, _super);
    function AnnotationsTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(function (x) { return true; }, universeHelpers.isAnnotationsProperty)
        ]), "name");
    }
    return AnnotationsTransformer;
}(ArrayToMapTransformer));
var BodiesTransformer = (function (_super) {
    __extends(BodiesTransformer, _super);
    function BodiesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universeHelpers.isResponseType, universeHelpers.isBodyProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isMethodBaseSibling, universeHelpers.isBodyProperty)
        ]), "name");
    }
    return BodiesTransformer;
}(ArrayToMapTransformer));
var TraitsTransformer = (function (_super) {
    __extends(TraitsTransformer, _super);
    function TraitsTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universeHelpers.isLibraryBaseSibling, universeHelpers.isTraitsProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isApiSibling, universeHelpers.isTraitsProperty)
        ]), "name");
    }
    return TraitsTransformer;
}(ArrayToMappingsArrayTransformer));
var ResourceTypesTransformer = (function (_super) {
    __extends(ResourceTypesTransformer, _super);
    function ResourceTypesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universeHelpers.isLibraryBaseSibling, universeHelpers.isResourceTypesProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isApiSibling, universeHelpers.isResourceTypesProperty)
        ]), "name");
    }
    ResourceTypesTransformer.prototype.transform = function (value) {
        value.forEach(function (x) {
            var methodsPropertyName = universes.Universe10.ResourceBase.properties.methods.name;
            var methods = x[methodsPropertyName];
            if (methods) {
                methods.forEach(function (m) {
                    var keys = Object.keys(m);
                    if (keys.length > 0) {
                        var methodName = keys[0];
                        x[methodName] = m[methodName];
                    }
                });
            }
            delete x[methodsPropertyName];
        });
        return _super.prototype.transform.call(this, value);
    };
    return ResourceTypesTransformer;
}(ArrayToMappingsArrayTransformer));
var FacetsTransformer = (function (_super) {
    __extends(FacetsTransformer, _super);
    function FacetsTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universeHelpers.isTypeDeclarationSibling, universeHelpers.isFacetsProperty)
        ]), "name");
    }
    return FacetsTransformer;
}(ArrayToMapTransformer));
var SecuritySchemesTransformer = (function (_super) {
    __extends(SecuritySchemesTransformer, _super);
    function SecuritySchemesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universeHelpers.isLibraryBaseSibling, universeHelpers.isSecuritySchemesProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isApiSibling, universeHelpers.isSecuritySchemesProperty)
        ]), "name");
    }
    return SecuritySchemesTransformer;
}(ArrayToMappingsArrayTransformer));
var AnnotationTypesTransformer = (function (_super) {
    __extends(AnnotationTypesTransformer, _super);
    function AnnotationTypesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universeHelpers.isLibraryBaseSibling, universeHelpers.isAnnotationTypesProperty)
        ]), "displayName");
    }
    return AnnotationTypesTransformer;
}(ArrayToMappingsArrayTransformer));
var ResourceTypeMethodsToMapTransformer = (function (_super) {
    __extends(ResourceTypeMethodsToMapTransformer, _super);
    function ResourceTypeMethodsToMapTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universeHelpers.isResourceTypeType, universeHelpers.isMethodsProperty)
        ]), "method");
    }
    return ResourceTypeMethodsToMapTransformer;
}(ArrayToMappingsArrayTransformer));
var exampleNameProp = universe.Universe10.ExampleSpec.properties.name.name;
var exampleContentProp = universe.Universe10.ExampleSpec.properties.content.name;
var exampleStructuredContentProp = "structuredContent";
var ExamplesTransformer = (function () {
    function ExamplesTransformer() {
        this.matcher = new BasicObjectPropertyMatcher(universeHelpers.isTypeDeclarationSibling, universeHelpers.isExamplesProperty);
    }
    ExamplesTransformer.prototype.match = function (node, prop) {
        return this.matcher.match(node.definition(), prop);
    };
    ExamplesTransformer.prototype.transform = function (value) {
        var _this = this;
        if (Array.isArray(value) && value.length > 0) {
            if (value[0][exampleNameProp]) {
                var obj = {};
                value.forEach(function (x) { return obj[x[exampleNameProp]] = _this.getActualExample(x); });
                return obj;
            }
            else {
                var arr = value.map(function (x) { return _this.getActualExample(x); });
                return arr;
            }
        }
        else {
            return value;
        }
    };
    ExamplesTransformer.prototype.getActualExample = function (exampleSpecObj) {
        if (exampleSpecObj[exampleStructuredContentProp]) {
            return exampleSpecObj[exampleStructuredContentProp];
        }
        return exampleSpecObj[exampleContentProp];
    };
    return ExamplesTransformer;
}());
var TypeExampleTransformer = (function () {
    function TypeExampleTransformer() {
    }
    TypeExampleTransformer.prototype.match = function (node, prop) {
        return universeHelpers.isTypeDeclarationSibling(prop.range());
    };
    TypeExampleTransformer.prototype.transform = function (value) {
        var isArray = Array.isArray(value);
        var arr = isArray ? value : [value];
        arr.forEach(function (x) {
            var structuredExample = x['structuredExample'];
            if (structuredExample) {
                x['example'] = structuredExample;
                delete x['structuredExample'];
            }
        });
        return isArray ? arr : arr[0];
    };
    return TypeExampleTransformer;
}());
var SchemasTransformer = (function () {
    function SchemasTransformer() {
        this.matcher = new BasicObjectPropertyMatcher(universeHelpers.isApiSibling, universeHelpers.isSchemasProperty);
    }
    SchemasTransformer.prototype.match = function (node, prop) {
        return this.matcher.match(node.definition(), prop);
    };
    SchemasTransformer.prototype.transform = function (value) {
        if (Array.isArray(value) && value.length > 0) {
            var array = value.map(function (x) {
                var obj = {};
                obj[x.key] = x.value;
                return obj;
            });
            return array;
        }
        else {
            return value;
        }
    };
    SchemasTransformer.prototype.getActualExample = function (exampleSpecObj) {
        if (exampleSpecObj[exampleStructuredContentProp]) {
            return exampleSpecObj[exampleStructuredContentProp];
        }
        return exampleSpecObj[exampleContentProp];
    };
    return SchemasTransformer;
}());
var ProtocolsToUpperCaseTransformer = (function () {
    function ProtocolsToUpperCaseTransformer() {
    }
    ProtocolsToUpperCaseTransformer.prototype.match = function (node, prop) {
        return universeHelpers.isProtocolsProperty(prop);
    };
    ProtocolsToUpperCaseTransformer.prototype.transform = function (value) {
        if (typeof (value) == 'string') {
            return value.toUpperCase();
        }
        else if (Array.isArray(value)) {
            return value.map(function (x) { return x.toUpperCase(); });
        }
        return value;
    };
    return ProtocolsToUpperCaseTransformer;
}());
var OneElementArrayTransformer = (function () {
    function OneElementArrayTransformer() {
        this.exceptions = new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universeHelpers.isTypeDeclarationSibling, universeHelpers.isPropertiesProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isApiSibling, universeHelpers.isResourcesProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isResourceTypeType, universeHelpers.isResourcesProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isResourceBaseSibling, universeHelpers.isResourcesProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isMethodBaseSibling, universeHelpers.isResponsesProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isResourceBaseSibling, universeHelpers.isMethodsProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isResponseType, universeHelpers.isBodyProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isApiSibling, universeHelpers.isProtocolsProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isMethodBaseSibling, universeHelpers.isProtocolsProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isResourceBaseSibling, universeHelpers.isProtocolsProperty),
            new BasicObjectPropertyMatcher(universeHelpers.isLibraryBaseSibling, universeHelpers.isUsesProperty),
            new BasicObjectPropertyMatcher(function (x) { return true; }, function (x) { return x.nameId() == 'enum'; }),
            new BasicObjectPropertyMatcher(function (x) { return true; }, universeHelpers.isSecuredByProperty)
        ]);
    }
    OneElementArrayTransformer.prototype.match = function (node, prop) {
        return !this.exceptions.match(node.definition(), prop);
    };
    OneElementArrayTransformer.prototype.transform = function (value) {
        if (Array.isArray(value) && value.length == 1) {
            return value[0];
        }
        return value;
    };
    return OneElementArrayTransformer;
}());
var ResourcesTransformer = (function () {
    function ResourcesTransformer() {
    }
    ResourcesTransformer.prototype.match = function (node, prop) {
        return universeHelpers.isResourcesProperty(prop);
    };
    ResourcesTransformer.prototype.transform = function (value) {
        if (!Array.isArray(value)) {
            return value;
        }
        value.forEach(function (x) {
            var relUri = x[universes.Universe10.Resource.properties.relativeUri.name];
            if (relUri) {
                var segments = relUri.trim().split("/");
                while (segments.length > 0 && segments[0].length == 0) {
                    segments.shift();
                }
                x["relativeUriPathSegments"] = segments;
            }
        });
        return value;
    };
    return ResourcesTransformer;
}());
var TemplateParametrizedPropertiesTransformer = (function () {
    function TemplateParametrizedPropertiesTransformer() {
    }
    TemplateParametrizedPropertiesTransformer.prototype.match = function (node, prop) {
        return universeHelpers.isResourceTypesProperty(prop) || universeHelpers.isTraitsProperty(prop);
    };
    TemplateParametrizedPropertiesTransformer.prototype.transform = function (value) {
        if (Array.isArray(value)) {
            value.forEach(function (x) {
                var propName = universe.Universe10.Trait.properties.parametrizedProperties.name;
                var parametrizedProps = x[propName];
                if (parametrizedProps) {
                    Object.keys(parametrizedProps).forEach(function (y) {
                        x[y] = parametrizedProps[y];
                    });
                    delete x[propName];
                }
            });
        }
        return value;
    };
    return TemplateParametrizedPropertiesTransformer;
}());
var ReferencesTransformer = (function () {
    function ReferencesTransformer() {
    }
    ReferencesTransformer.prototype.match = function (node, prop) {
        return universeHelpers.isSecuredByProperty(prop)
            || universeHelpers.isIsProperty(prop)
            || ((universeHelpers.isResourceType(node.highLevel().definition())
                || universeHelpers.isResourceTypeType(node.highLevel().definition()))
                && universeHelpers.isTypeProperty(prop));
    };
    ReferencesTransformer.prototype.transform = function (value) {
        var _this = this;
        if (!value) {
            return null;
        }
        if (Array.isArray(value)) {
            var array = value.map(function (x) { return _this.toSimpleValue(x); });
            return array;
        }
        else {
            return this.toSimpleValue(value);
        }
    };
    ReferencesTransformer.prototype.toSimpleValue = function (x) {
        var name = x['name'];
        var params = x['structuredValue'];
        if (params) {
            var obj = {};
            obj[name] = params;
            return obj;
        }
        else {
            return name;
        }
    };
    return ReferencesTransformer;
}());
var PropertiesData = (function () {
    function PropertiesData() {
        this.map = {};
    }
    PropertiesData.prototype.addProperty = function (prop, wrapperKind) {
        var data = this.map[wrapperKind];
        if (!data) {
            data = new TypePropertiesData(wrapperKind);
            this.map[wrapperKind] = data;
        }
        data.addProperty(prop);
    };
    PropertiesData.prototype.print = function () {
        var _this = this;
        return Object.keys(this.map).map(function (x) { return _this.map[x].print(); }).join('\n') + "\n";
    };
    return PropertiesData;
}());
var TypePropertiesData = (function () {
    function TypePropertiesData(typeName) {
        this.typeName = typeName;
        this.map = {};
    }
    TypePropertiesData.prototype.addProperty = function (prop) {
        var name = prop.domain().nameId();
        var data = this.map[name];
        if (!data) {
            data = new TypePropertiesData2(name);
            this.map[name] = data;
        }
        data.addProperty(prop);
    };
    TypePropertiesData.prototype.print = function () {
        var _this = this;
        return this.typeName + ':\n' + Object.keys(this.map).map(function (x) { return '    ' + _this.map[x].print(); }).join('\n');
    };
    return TypePropertiesData;
}());
var TypePropertiesData2 = (function () {
    function TypePropertiesData2(typeName) {
        this.typeName = typeName;
        this.map = {};
    }
    TypePropertiesData2.prototype.addProperty = function (prop) {
        var name = prop.nameId();
        this.map[name] = prop;
    };
    TypePropertiesData2.prototype.print = function () {
        return this.typeName + ': ' + Object.keys(this.map).sort().join(', ');
    };
    return TypePropertiesData2;
}());
//# sourceMappingURL=TCKDumper.js.map