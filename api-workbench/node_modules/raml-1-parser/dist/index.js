"use strict";
var apiLoader = require("./raml1/apiLoader");
/**
 * RAML 1.0 top-level AST interfaces.
 */
exports.api10 = require("./raml1/artifacts/raml10parserapi");
/**
 * RAML 0.8 top-level AST interfaces.
 */
exports.api08 = require("./raml1/artifacts/raml08parserapi");
function loadApiSync(apiPath, arg1, arg2) {
    return apiLoader.loadApi(apiPath, arg1, arg2).getOrElse(null);
}
exports.loadApiSync = loadApiSync;
function loadRAMLSync(ramlPath, arg1, arg2) {
    return apiLoader.loadApi(ramlPath, arg1, arg2).getOrElse(null);
}
exports.loadRAMLSync = loadRAMLSync;
function loadApi(apiPath, arg1, arg2) {
    return apiLoader.loadApiAsync(apiPath, arg1, arg2);
}
exports.loadApi = loadApi;
function loadRAML(ramlPath, arg1, arg2) {
    return apiLoader.loadRAMLAsync(ramlPath, arg1, arg2);
}
exports.loadRAML = loadRAML;
/**
 * Gets AST node by runtime type, if runtime type matches any.
 * @param runtimeType - runtime type to find the match for
 */
function getLanguageElementByRuntimeType(runtimeType) {
    return apiLoader.getLanguageElementByRuntimeType(runtimeType);
}
exports.getLanguageElementByRuntimeType = getLanguageElementByRuntimeType;
/**
 * High-level AST interfaces.
 */
exports.hl = require("./raml1/highLevelAST");
/**
 * Low-level AST interfaces.
 */
exports.ll = require("./raml1/lowLevelAST");
/**
 * Search functionality, operates on high AST level.
 */
exports.search = require("./searchProxy");
/**
 * High-level stub node factory methods.
 */
exports.stubs = require("./stubProxy");
exports.utils = require("./utils");
/**
 * Low-level project factory.
 */
exports.project = require("./project");
/**
 * Helpers for classification of high-level AST entity types.
 */
exports.universeHelpers = require("./raml1/tools/universeHelpers");
/**
 * Definition system.
 */
exports.ds = require("raml-definition-system");
/**
 * Schema utilities.
 */
exports.schema = require("./schema");
/**
 * A set of constants describing definition system entities.
 * @hidden
 **/
exports.universes = exports.ds.universesInfo;
/**
 * Exposed parser model modification methods. Operate on high-level.
 */
exports.parser = require("./parser");
/**
 * Applies traits and resources types to API on high-level.
 * Top-level expansion should be performed via calling expand() method of API node.
 */
exports.expander = require("./expanderStub");
/**
 * Exposed part of custom methods applied to top-level AST during generation.
 * Not to be used by parser clients.
 */
exports.wrapperHelper = require("./wrapperHelperStub");
//# sourceMappingURL=index.js.map