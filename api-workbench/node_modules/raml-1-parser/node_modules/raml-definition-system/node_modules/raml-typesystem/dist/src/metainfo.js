"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="../typings/main.d.ts" />
var ts = require("./typesystem");
var typesystem_1 = require("./typesystem");
var restrictions_1 = require("./restrictions");
var _ = require("underscore");
var xmlio = require("./xmlio");
var MetaInfo = (function (_super) {
    __extends(MetaInfo, _super);
    function MetaInfo(_name, _value, inhertitable) {
        if (inhertitable === void 0) { inhertitable = false; }
        _super.call(this, inhertitable);
        this._name = _name;
        this._value = _value;
    }
    MetaInfo.prototype.value = function () {
        return this._value;
    };
    MetaInfo.prototype.requiredType = function () {
        return ts.ANY;
    };
    MetaInfo.prototype.facetName = function () {
        return this._name;
    };
    return MetaInfo;
}(ts.TypeInformation));
exports.MetaInfo = MetaInfo;
var Description = (function (_super) {
    __extends(Description, _super);
    function Description(value) {
        _super.call(this, "description", value);
    }
    return Description;
}(MetaInfo));
exports.Description = Description;
var NotScalar = (function (_super) {
    __extends(NotScalar, _super);
    function NotScalar() {
        _super.call(this, "notScalar", true);
    }
    return NotScalar;
}(MetaInfo));
exports.NotScalar = NotScalar;
var DisplayName = (function (_super) {
    __extends(DisplayName, _super);
    function DisplayName(value) {
        _super.call(this, "displayName", value);
    }
    return DisplayName;
}(MetaInfo));
exports.DisplayName = DisplayName;
var Usage = (function (_super) {
    __extends(Usage, _super);
    function Usage(value) {
        _super.call(this, "usage", value);
    }
    return Usage;
}(MetaInfo));
exports.Usage = Usage;
var Annotation = (function (_super) {
    __extends(Annotation, _super);
    function Annotation(name, value) {
        _super.call(this, name, value);
    }
    Annotation.prototype.validateSelf = function (registry) {
        var tp = registry.get(this.facetName());
        if (!tp) {
            return new typesystem_1.Status(typesystem_1.Status.ERROR, 0, "using unknown annotation type:" + this.facetName(), this);
        }
        var q = this.value();
        if (!q) {
            if (tp.isString()) {
                q = "";
            }
        }
        var valOwner = tp.validateDirect(q, true, false);
        if (!valOwner.isOk()) {
            var res = new typesystem_1.Status(typesystem_1.Status.OK, 0, "invalid annotation value" + valOwner.getMessage(), this);
            res.addSubStatus(valOwner);
            return res;
        }
        return ts.OK_STATUS;
    };
    return Annotation;
}(MetaInfo));
exports.Annotation = Annotation;
var FacetDeclaration = (function (_super) {
    __extends(FacetDeclaration, _super);
    function FacetDeclaration(name, _type, optional) {
        _super.call(this, name, _type, true);
        this.name = name;
        this._type = _type;
        this.optional = optional;
    }
    FacetDeclaration.prototype.actualName = function () {
        if (this.name.charAt(this.name.length - 1) == '?') {
            return this.name.substr(0, this.name.length - 1);
        }
        return this.name;
    };
    FacetDeclaration.prototype.isOptional = function () {
        return this.optional;
    };
    FacetDeclaration.prototype.type = function () {
        return this._type;
    };
    return FacetDeclaration;
}(MetaInfo));
exports.FacetDeclaration = FacetDeclaration;
var CustomFacet = (function (_super) {
    __extends(CustomFacet, _super);
    function CustomFacet(name, value) {
        _super.call(this, name, value, true);
    }
    return CustomFacet;
}(MetaInfo));
exports.CustomFacet = CustomFacet;
function parseExampleIfNeeded(val, type) {
    if (typeof val === 'string') {
        if (type.isObject() || type.isArray() || type.isExternal()) {
            var exampleString = val;
            var firstChar = exampleString.trim().charAt(0);
            if (firstChar == "{" || firstChar == "[") {
                try {
                    return JSON.parse(exampleString);
                }
                catch (e) {
                    if (type.isObject() || type.isArray()) {
                        var c = new typesystem_1.Status(typesystem_1.Status.ERROR, 0, "Can not parse JSON example:" + e.message, this);
                        return c;
                    }
                }
            }
            if (firstChar == "<") {
                try {
                    return xmlio.readObject(exampleString, type);
                }
                catch (e) {
                }
            }
        }
    }
    return val;
}
var Example = (function (_super) {
    __extends(Example, _super);
    function Example(value) {
        _super.call(this, "example", value);
    }
    Example.prototype.validateSelf = function (registry) {
        var rr = parseExampleIfNeeded(this.value(), this.owner());
        if (rr instanceof ts.Status) {
            rr.setValidationPath({ name: "example" });
            return rr;
        }
        var valOwner = this.owner().validateDirect(rr, true, false);
        if (!valOwner.isOk()) {
            if (typeof this.value() === "string") {
            }
            var c = new typesystem_1.Status(typesystem_1.Status.ERROR, 0, "using invalid `example`:" + valOwner.getMessage(), this);
            valOwner.getErrors().forEach(function (x) { return c.addSubStatus(x); });
            c.setValidationPath({ name: "example" });
            return c;
        }
        return ts.OK_STATUS;
    };
    Example.prototype.example = function () {
        return parseExampleIfNeeded(this.value(), this.owner());
    };
    return Example;
}(MetaInfo));
exports.Example = Example;
var Required = (function (_super) {
    __extends(Required, _super);
    function Required(value) {
        _super.call(this, "required", value);
    }
    Required.prototype.validateSelf = function (registry) {
        if (typeof this.value() !== "boolean") {
            return new typesystem_1.Status(typesystem_1.Status.ERROR, 0, "value of required facet should be boolean", this);
        }
        return ts.OK_STATUS;
    };
    return Required;
}(MetaInfo));
exports.Required = Required;
var AllowedTargets = (function (_super) {
    __extends(AllowedTargets, _super);
    function AllowedTargets(value) {
        _super.call(this, "allowedTargets", value);
    }
    AllowedTargets.prototype.validateSelf = function (registry) {
        return ts.OK_STATUS;
    };
    return AllowedTargets;
}(MetaInfo));
exports.AllowedTargets = AllowedTargets;
var Examples = (function (_super) {
    __extends(Examples, _super);
    function Examples(value) {
        _super.call(this, "examples", value);
    }
    Examples.prototype.examples = function () {
        var _this = this;
        var v = this.value();
        var result = [];
        Object.keys(v).forEach(function (x) {
            if (typeof v[x] == 'object') {
                var example = parseExampleIfNeeded(v[x].content, _this.owner());
                result.push(example);
            }
        });
        return result;
    };
    Examples.prototype.validateSelf = function (registry) {
        var _this = this;
        if (typeof this.value() === 'object') {
            var rs = new typesystem_1.Status(typesystem_1.Status.OK, 0, "", this);
            var v = this.value();
            Object.keys(v).forEach(function (x) {
                if (typeof v[x] == 'object') {
                    var example = parseExampleIfNeeded(v[x].content, _this.owner());
                    if (example instanceof ts.Status) {
                        example.setValidationPath({ name: x });
                        rs.addSubStatus(example);
                        return;
                    }
                    var res = _this.owner().validateDirect(example, true, false);
                    res.getErrors().forEach(function (ex) {
                        rs.addSubStatus(ex);
                        ex.setValidationPath({ name: x, child: { name: "content" } });
                    });
                    Object.keys(v[x]).forEach(function (key) {
                        if (key.charAt(0) == '(' && key.charAt(key.length - 1) == ')') {
                            var a = new Annotation(key.substring(1, key.length - 1), v[x][key]);
                            rs.addSubStatus(a.validateSelf(registry));
                        }
                    });
                }
            });
            return rs;
        }
        else {
            return new typesystem_1.Status(typesystem_1.Status.ERROR, 0, "examples should be a map", this);
        }
    };
    return Examples;
}(MetaInfo));
exports.Examples = Examples;
var XMLInfo = (function (_super) {
    __extends(XMLInfo, _super);
    function XMLInfo(o) {
        _super.call(this, "xml", o);
    }
    return XMLInfo;
}(MetaInfo));
exports.XMLInfo = XMLInfo;
var Default = (function (_super) {
    __extends(Default, _super);
    function Default(value) {
        _super.call(this, "default", value);
    }
    Default.prototype.validateSelf = function (registry) {
        var valOwner = this.owner().validateDirect(this.value(), true);
        if (!valOwner.isOk()) {
            return new typesystem_1.Status(typesystem_1.Status.ERROR, 0, "using invalid `defaultValue`:" + valOwner.getMessage(), this);
        }
        return ts.OK_STATUS;
    };
    return Default;
}(MetaInfo));
exports.Default = Default;
var Discriminator = (function (_super) {
    __extends(Discriminator, _super);
    function Discriminator(property) {
        _super.call(this, true);
        this.property = property;
    }
    Discriminator.prototype.requiredType = function () {
        return ts.OBJECT;
    };
    Discriminator.prototype.value = function () {
        return this.property;
    };
    Discriminator.prototype.facetName = function () { return "discriminator"; };
    Discriminator.prototype.validateSelf = function (registry) {
        var _this = this;
        if (!this.owner().isSubTypeOf(ts.OBJECT)) {
            return new typesystem_1.Status(typesystem_1.Status.ERROR, 0, "you only can use `discriminator` with object types", this);
        }
        var prop = _.find(this.owner().meta(), function (x) { return x instanceof restrictions_1.PropertyIs && x.propertyName() == _this.value(); });
        if (!prop) {
            return new typesystem_1.Status(typesystem_1.Status.ERROR, 0, "Using unknown property: " + this.value() + " as discriminator", this);
        }
        if (!prop.value().isScalar()) {
            return new typesystem_1.Status(typesystem_1.Status.ERROR, 0, "It is only allowed to use scalar properties as discriminators", this);
        }
        return ts.OK_STATUS;
    };
    return Discriminator;
}(ts.TypeInformation));
exports.Discriminator = Discriminator;
var DiscriminatorValue = (function (_super) {
    __extends(DiscriminatorValue, _super);
    function DiscriminatorValue(_value) {
        _super.call(this, false);
        this._value = _value;
    }
    DiscriminatorValue.prototype.facetName = function () { return "discriminatorValue"; };
    DiscriminatorValue.prototype.validateSelf = function (registry) {
        if (!this.owner().isSubTypeOf(ts.OBJECT)) {
            return new typesystem_1.Status(typesystem_1.Status.ERROR, 0, "you only can use `discriminator` with object types", this);
        }
        var ds = this.owner().oneMeta(Discriminator);
        if (!ds) {
            return new typesystem_1.Status(typesystem_1.Status.ERROR, 0, "you can not use `discriminatorValue` without declaring `discriminator`", this);
        }
        var prop = _.find(this.owner().meta(), function (x) { return x instanceof restrictions_1.PropertyIs && x.propertyName() == ds.value(); });
        if (prop) {
            var sm = prop.value().validate(this.value());
            if (!sm.isOk()) {
                return new typesystem_1.Status(typesystem_1.Status.ERROR, 0, "using invalid `disciminatorValue`:" + sm.getMessage(), this);
            }
        }
        return ts.OK_STATUS;
    };
    DiscriminatorValue.prototype.requiredType = function () {
        return ts.OBJECT;
    };
    DiscriminatorValue.prototype.value = function () {
        return this._value;
    };
    return DiscriminatorValue;
}(ts.TypeInformation));
exports.DiscriminatorValue = DiscriminatorValue;
//# sourceMappingURL=metainfo.js.map